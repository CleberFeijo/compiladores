
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGRAMAleftLEFTPARENTHESISRIGHTPARENTHESISleftGREATERTHANLESSTHANGREATERTHANOREQUALLESSTHANOREQUALCOMPARENOTEQUALleftPLUSMINUSleftTIMESDIVIDErightNOTARRAY ASSIGNMENT BEGIN COLON COMMA COMMENT COMPARE CONST DIVIDE DO DOT ELSE END FUNCTION GREATERTHAN GREATERTHANOREQUAL IDENTIFIER IF INITIALIZER INTEGER_NUM INTEGER_TYPE LEFTBRACKET LEFTPARENTHESIS LESSTHAN LESSTHANOREQUAL MINUS MODULO NOT NOTEQUAL OF PLUS PROCEDURE READ REAL_NUM REAL_TYPE RECORD RETURN RIGHTBRACKET RIGHTPARENTHESIS SEMICOLON STRING THEN TIMES TYPE VAR WHILE WRITEempty :\n    PROGRAMA : DECLARACOES BLOCO\n    \n    DECLARACOES : DEF_CONST DEF_TIPOS DEF_VAR DEF_ROT\n    \n    DEF_CONST : CONST CONSTANTE SEMICOLON LIST_CONST\n              | empty\n    \n    LIST_CONST : CONSTANTE SEMICOLON LIST_CONST\n               | empty\n    \n    CONSTANTE : ID INITIALIZER CONST_VALOR\n    \n    CONST_VALOR : STRING\n                | EXP_MAT\n    \n    DEF_TIPOS : TYPE TIPO SEMICOLON LIST_TIPOS\n              | empty\n    \n    LIST_TIPOS : TIPO SEMICOLON LIST_TIPOS\n               | empty\n    \n    TIPO : ID INITIALIZER TIPO_DADO\n    \n    TIPO_DADO : INTEGER_TYPE\n              | REAL_TYPE\n              | ARRAY LEFTBRACKET NUMERO RIGHTBRACKET OF TIPO_DADO\n              | RECORD CAMPOS END\n              | ID\n    \n    CAMPOS : ID COLON TIPO_DADO LISTA_CAMPOS\n    \n    LISTA_CAMPOS : SEMICOLON CAMPOS LISTA_CAMPOS\n                | empty\n    \n    DEF_VAR : VAR VARIAVEL SEMICOLON LIST_VAR\n            | empty\n    \n    LIST_VAR : VARIAVEL SEMICOLON LIST_VAR\n             | empty\n    \n    VARIAVEL : LISTA_ID COLON TIPO_DADO\n    \n    LISTA_ID : ID COMMA LISTA_ID\n             | ID\n    \n    DEF_ROT : NOME_ROTINA DEF_VAR BLOCO DEF_ROT\n            | empty\n    \n    NOME_ROTINA : FUNCTION ID PARAM_ROT COLON TIPO_DADO\n                | PROCEDURE ID PARAM_ROT\n    \n    PARAM_ROT : LEFTPARENTHESIS CAMPOS RIGHTPARENTHESIS\n              | empty\n    \n    BLOCO : BEGIN COMANDO SEMICOLON LISTA_COM END\n          | COLON COMANDO\n    \n    LISTA_COM : COMANDO SEMICOLON LISTA_COM\n              | empty\n    \n    COMANDO : ID NOME ATRIB\n            | WHILE EXP_LOGICA DO BLOCO\n            | IF EXP_LOGICA THEN BLOCO ELSE_RULE\n            | RETURN EXP_LOGICA\n            | WRITE EXP_MAT\n            | READ ID NOME\n    \n    ATRIB : ASSIGNMENT EXP_MAT\n          | empty\n    \n    ELSE_RULE : ELSE BLOCO\n              | empty\n    \n    LISTA_PARAM : PARAMETRO COMMA LISTA_PARAM\n                | PARAMETRO\n                | empty\n    \n    OP_LOGICO : GREATERTHAN\n              | LESSTHAN\n              | COMPARE\n              | NOTEQUAL\n              | GREATERTHANOREQUAL\n              | LESSTHANOREQUAL\n    \n    EXP_LOGICA : EXP_MAT OP_LOGICO EXP_LOGICA\n               | EXP_MAT\n    \n    EXP_MAT : PARAMETRO OP_MAT EXP_MAT\n            | PARAMETRO\n    \n    OP_MAT : PLUS\n           | MINUS\n           | TIMES\n           | DIVIDE\n           | MODULO\n    \n    PARAMETRO : ID NOME\n              | NUMERO\n    \n    NOME : DOT ID NOME\n         | LEFTBRACKET PARAMETRO RIGHTBRACKET\n         | LEFTPARENTHESIS LISTA_PARAM RIGHTPARENTHESIS\n         | empty\n    ID : IDENTIFIERNUMERO : INTEGER_NUM\n              | REAL_NUM'
    
_lr_action_items = {'CONST':([0,],[4,]),'TYPE':([0,3,5,28,58,59,106,132,],[-1,10,-5,-1,-4,-7,-1,-6,]),'VAR':([0,3,5,9,11,14,28,48,55,58,59,93,98,99,100,102,103,106,121,122,128,132,142,144,147,148,156,],[-1,-1,-5,24,-12,-75,-1,24,-1,-4,-7,-1,-11,-14,-20,-16,-17,-1,-36,-34,-1,-6,-13,-19,-33,-35,-18,]),'FUNCTION':([0,3,5,9,11,14,16,22,23,25,28,31,35,37,38,39,40,41,42,44,45,46,55,58,59,66,68,69,88,90,94,98,99,106,108,109,110,111,112,114,115,116,117,118,124,125,128,132,135,137,141,142,146,149,],[-1,-1,-5,-1,-12,-75,-1,-38,50,-25,-1,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,-1,-4,-7,-41,-48,-1,-69,-46,-1,-11,-14,-1,-37,-47,-71,-72,-73,-42,-60,-62,-1,50,-24,-27,-1,-6,-43,-50,-1,-13,-49,-26,]),'PROCEDURE':([0,3,5,9,11,14,16,22,23,25,28,31,35,37,38,39,40,41,42,44,45,46,55,58,59,66,68,69,88,90,94,98,99,106,108,109,110,111,112,114,115,116,117,118,124,125,128,132,135,137,141,142,146,149,],[-1,-1,-5,-1,-12,-75,-1,-38,51,-25,-1,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,-1,-4,-7,-41,-48,-1,-69,-46,-1,-11,-14,-1,-37,-47,-71,-72,-73,-42,-60,-62,-1,51,-24,-27,-1,-6,-43,-50,-1,-13,-49,-26,]),'BEGIN':([0,2,3,5,9,11,14,16,22,23,25,28,31,35,37,38,39,40,41,42,44,45,46,47,48,49,55,58,59,66,68,69,74,88,89,90,91,93,94,98,99,100,102,103,106,108,109,110,111,112,114,115,116,117,118,121,122,124,125,128,132,135,136,137,138,141,142,144,146,147,148,149,156,],[-1,7,-1,-5,-1,-12,-75,-1,-38,-1,-25,-1,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,-3,-1,-32,-1,-4,-7,-41,-48,-1,7,-69,7,-46,7,-1,-1,-11,-14,-20,-16,-17,-1,-37,-47,-71,-72,-73,-42,-60,-62,-1,-1,-36,-34,-24,-27,-1,-6,-43,7,-50,-31,-1,-13,-19,-49,-33,-35,-26,-18,]),'COLON':([0,2,3,5,9,11,14,16,22,23,25,28,31,35,37,38,39,40,41,42,44,45,46,47,48,49,53,54,55,58,59,66,68,69,74,88,89,90,91,92,93,94,98,99,100,102,103,106,108,109,110,111,112,114,115,116,117,118,119,121,122,124,125,127,128,131,132,135,136,137,138,141,142,144,146,147,148,149,156,],[-1,8,-1,-5,-1,-12,-75,-1,-38,-1,-25,-1,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,-3,-1,-32,95,-30,-1,-4,-7,-41,-48,-1,8,-69,8,-46,8,-1,-1,-1,-11,-14,-20,-16,-17,-1,-37,-47,-71,-72,-73,-42,-60,-62,-1,-1,139,-36,-34,-24,-27,-29,-1,145,-6,-43,8,-50,-31,-1,-13,-19,-49,-33,-35,-26,-18,]),'$end':([1,6,14,16,22,31,35,37,38,39,40,41,42,44,45,46,66,68,69,88,90,108,109,110,111,112,114,115,116,117,135,137,146,],[0,-2,-75,-1,-38,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,-41,-48,-1,-69,-46,-37,-47,-71,-72,-73,-42,-60,-62,-1,-43,-50,-49,]),'IDENTIFIER':([4,7,8,10,17,18,19,20,21,24,28,29,30,32,33,34,50,51,55,56,67,75,76,77,78,79,80,81,82,83,84,85,86,87,94,95,96,105,106,107,113,120,128,139,141,145,152,154,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-54,-55,-56,-57,-58,-59,14,-64,-65,-66,-67,-68,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'WHILE':([7,8,30,107,],[17,17,17,17,]),'IF':([7,8,30,107,],[18,18,18,18,]),'RETURN':([7,8,30,107,],[19,19,19,19,]),'WRITE':([7,8,30,107,],[20,20,20,20,]),'READ':([7,8,30,107,],[21,21,21,21,]),'SEMICOLON':([12,14,15,16,22,26,31,35,37,38,39,40,41,42,44,45,46,52,57,60,61,62,63,66,68,69,88,90,97,100,101,102,103,108,109,110,111,112,114,115,116,117,123,126,135,137,144,146,151,153,155,156,157,158,],[28,-75,30,-1,-38,55,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,94,106,-8,-9,-10,107,-41,-48,-1,-69,-46,128,-20,-15,-16,-17,-37,-47,-71,-72,-73,-42,-60,-62,-1,141,-28,-43,-50,-19,-49,154,-21,-23,-18,154,-22,]),'INITIALIZER':([13,14,27,],[29,-75,56,]),'DOT':([14,16,39,46,69,],[-75,32,32,32,32,]),'LEFTBRACKET':([14,16,39,46,69,104,],[-75,33,33,33,33,129,]),'LEFTPARENTHESIS':([14,16,39,46,69,92,93,],[-75,34,34,34,34,120,120,]),'ASSIGNMENT':([14,16,31,35,69,110,111,112,],[-75,-1,67,-74,-1,-71,-72,-73,]),'ELSE':([14,16,22,31,35,37,38,39,40,41,42,44,45,46,66,68,69,88,90,108,109,110,111,112,114,115,116,117,135,137,146,],[-75,-1,-38,-1,-74,-61,-63,-1,-70,-76,-77,-44,-45,-1,-41,-48,-1,-69,-46,-37,-47,-71,-72,-73,-42,-60,-62,136,-43,-50,-49,]),'PLUS':([14,35,38,39,40,41,42,69,88,110,111,112,],[-75,-74,83,-1,-70,-76,-77,-1,-69,-71,-72,-73,]),'MINUS':([14,35,38,39,40,41,42,69,88,110,111,112,],[-75,-74,84,-1,-70,-76,-77,-1,-69,-71,-72,-73,]),'TIMES':([14,35,38,39,40,41,42,69,88,110,111,112,],[-75,-74,85,-1,-70,-76,-77,-1,-69,-71,-72,-73,]),'DIVIDE':([14,35,38,39,40,41,42,69,88,110,111,112,],[-75,-74,86,-1,-70,-76,-77,-1,-69,-71,-72,-73,]),'MODULO':([14,35,38,39,40,41,42,69,88,110,111,112,],[-75,-74,87,-1,-70,-76,-77,-1,-69,-71,-72,-73,]),'GREATERTHAN':([14,35,37,38,39,40,41,42,69,88,110,111,112,116,],[-75,-74,76,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-62,]),'LESSTHAN':([14,35,37,38,39,40,41,42,69,88,110,111,112,116,],[-75,-74,77,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-62,]),'COMPARE':([14,35,37,38,39,40,41,42,69,88,110,111,112,116,],[-75,-74,78,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-62,]),'NOTEQUAL':([14,35,37,38,39,40,41,42,69,88,110,111,112,116,],[-75,-74,79,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-62,]),'GREATERTHANOREQUAL':([14,35,37,38,39,40,41,42,69,88,110,111,112,116,],[-75,-74,80,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-62,]),'LESSTHANOREQUAL':([14,35,37,38,39,40,41,42,69,88,110,111,112,116,],[-75,-74,81,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-62,]),'DO':([14,35,36,37,38,39,40,41,42,69,88,110,111,112,115,116,],[-75,-74,74,-61,-63,-1,-70,-76,-77,-1,-69,-71,-72,-73,-60,-62,]),'THEN':([14,35,37,38,39,40,41,42,43,69,88,110,111,112,115,116,],[-75,-74,-61,-63,-1,-70,-76,-77,89,-1,-69,-71,-72,-73,-60,-62,]),'COMMA':([14,35,39,40,41,42,54,69,72,88,110,111,112,],[-75,-74,-1,-70,-76,-77,96,-1,113,-69,-71,-72,-73,]),'RIGHTBRACKET':([14,35,39,40,41,42,69,70,88,110,111,112,143,],[-75,-74,-1,-70,-76,-77,-1,111,-69,-71,-72,-73,150,]),'RIGHTPARENTHESIS':([14,34,35,39,40,41,42,69,71,72,73,88,100,102,103,110,111,112,113,134,140,144,151,153,155,156,157,158,],[-75,-1,-74,-1,-70,-76,-77,-1,112,-52,-53,-69,-20,-16,-17,-71,-72,-73,-1,-51,148,-19,-1,-21,-23,-18,-1,-22,]),'END':([14,30,64,65,100,102,103,107,130,133,144,151,153,155,156,157,158,],[-75,-1,108,-40,-20,-16,-17,-1,144,-39,-19,-1,-21,-23,-18,-1,-22,]),'INTEGER_NUM':([17,18,19,20,29,33,34,67,75,76,77,78,79,80,81,82,83,84,85,86,87,113,129,],[41,41,41,41,41,41,41,41,41,-54,-55,-56,-57,-58,-59,41,-64,-65,-66,-67,-68,41,41,]),'REAL_NUM':([17,18,19,20,29,33,34,67,75,76,77,78,79,80,81,82,83,84,85,86,87,113,129,],[42,42,42,42,42,42,42,42,42,-54,-55,-56,-57,-58,-59,42,-64,-65,-66,-67,-68,42,42,]),'STRING':([29,],[61,]),'INTEGER_TYPE':([56,95,139,145,152,],[102,102,102,102,102,]),'REAL_TYPE':([56,95,139,145,152,],[103,103,103,103,103,]),'ARRAY':([56,95,139,145,152,],[104,104,104,104,104,]),'RECORD':([56,95,139,145,152,],[105,105,105,105,105,]),'OF':([150,],[152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAMA':([0,],[1,]),'DECLARACOES':([0,],[2,]),'DEF_CONST':([0,],[3,]),'empty':([0,3,9,16,23,28,30,31,34,39,46,48,55,69,92,93,94,106,107,113,117,118,128,141,151,157,],[5,11,25,35,49,59,65,68,73,35,35,25,99,35,121,121,125,59,65,73,137,49,99,125,155,155,]),'BLOCO':([2,74,89,91,136,],[6,114,117,118,146,]),'DEF_TIPOS':([3,],[9,]),'CONSTANTE':([4,28,106,],[12,57,57,]),'ID':([4,7,8,10,17,18,19,20,21,24,28,29,30,32,33,34,50,51,55,56,67,75,82,94,95,96,105,106,107,113,120,128,139,141,145,152,154,],[13,16,16,27,39,39,39,39,46,54,13,39,16,69,39,39,92,93,27,100,39,39,39,54,100,54,131,13,16,39,131,27,100,54,100,100,131,]),'COMANDO':([7,8,30,107,],[15,22,63,63,]),'DEF_VAR':([9,48,],[23,91,]),'TIPO':([10,55,128,],[26,97,97,]),'NOME':([16,39,46,69,],[31,88,90,110,]),'EXP_LOGICA':([17,18,19,75,],[36,43,44,115,]),'EXP_MAT':([17,18,19,20,29,67,75,82,],[37,37,37,45,62,109,37,116,]),'PARAMETRO':([17,18,19,20,29,33,34,67,75,82,113,],[38,38,38,38,38,70,72,38,38,38,72,]),'NUMERO':([17,18,19,20,29,33,34,67,75,82,113,129,],[40,40,40,40,40,40,40,40,40,40,40,143,]),'DEF_ROT':([23,118,],[47,138,]),'NOME_ROTINA':([23,118,],[48,48,]),'VARIAVEL':([24,94,141,],[52,123,123,]),'LISTA_ID':([24,94,96,141,],[53,53,127,53,]),'LIST_CONST':([28,106,],[58,132,]),'CONST_VALOR':([29,],[60,]),'LISTA_COM':([30,107,],[64,133,]),'ATRIB':([31,],[66,]),'LISTA_PARAM':([34,113,],[71,134,]),'OP_LOGICO':([37,],[75,]),'OP_MAT':([38,],[82,]),'LIST_TIPOS':([55,128,],[98,142,]),'TIPO_DADO':([56,95,139,145,152,],[101,126,147,151,156,]),'PARAM_ROT':([92,93,],[119,122,]),'LIST_VAR':([94,141,],[124,149,]),'CAMPOS':([105,120,154,],[130,140,157,]),'ELSE_RULE':([117,],[135,]),'LISTA_CAMPOS':([151,157,],[153,158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAMA","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',23),
  ('PROGRAMA -> DECLARACOES BLOCO','PROGRAMA',2,'p_programa','grammar.py',29),
  ('DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROT','DECLARACOES',4,'p_declaracoes','grammar.py',37),
  ('DEF_CONST -> CONST CONSTANTE SEMICOLON LIST_CONST','DEF_CONST',4,'p_def_const','grammar.py',47),
  ('DEF_CONST -> empty','DEF_CONST',1,'p_def_const','grammar.py',48),
  ('LIST_CONST -> CONSTANTE SEMICOLON LIST_CONST','LIST_CONST',3,'p_list_const','grammar.py',58),
  ('LIST_CONST -> empty','LIST_CONST',1,'p_list_const','grammar.py',59),
  ('CONSTANTE -> ID INITIALIZER CONST_VALOR','CONSTANTE',3,'p_constante','grammar.py',69),
  ('CONST_VALOR -> STRING','CONST_VALOR',1,'p_const_valor','grammar.py',76),
  ('CONST_VALOR -> EXP_MAT','CONST_VALOR',1,'p_const_valor','grammar.py',77),
  ('DEF_TIPOS -> TYPE TIPO SEMICOLON LIST_TIPOS','DEF_TIPOS',4,'p_def_tipos','grammar.py',84),
  ('DEF_TIPOS -> empty','DEF_TIPOS',1,'p_def_tipos','grammar.py',85),
  ('LIST_TIPOS -> TIPO SEMICOLON LIST_TIPOS','LIST_TIPOS',3,'p_list_tipos','grammar.py',95),
  ('LIST_TIPOS -> empty','LIST_TIPOS',1,'p_list_tipos','grammar.py',96),
  ('TIPO -> ID INITIALIZER TIPO_DADO','TIPO',3,'p_tipo','grammar.py',106),
  ('TIPO_DADO -> INTEGER_TYPE','TIPO_DADO',1,'p_tipo_dado','grammar.py',113),
  ('TIPO_DADO -> REAL_TYPE','TIPO_DADO',1,'p_tipo_dado','grammar.py',114),
  ('TIPO_DADO -> ARRAY LEFTBRACKET NUMERO RIGHTBRACKET OF TIPO_DADO','TIPO_DADO',6,'p_tipo_dado','grammar.py',115),
  ('TIPO_DADO -> RECORD CAMPOS END','TIPO_DADO',3,'p_tipo_dado','grammar.py',116),
  ('TIPO_DADO -> ID','TIPO_DADO',1,'p_tipo_dado','grammar.py',117),
  ('CAMPOS -> ID COLON TIPO_DADO LISTA_CAMPOS','CAMPOS',4,'p_campos','grammar.py',131),
  ('LISTA_CAMPOS -> SEMICOLON CAMPOS LISTA_CAMPOS','LISTA_CAMPOS',3,'p_lista_campos','grammar.py',138),
  ('LISTA_CAMPOS -> empty','LISTA_CAMPOS',1,'p_lista_campos','grammar.py',139),
  ('DEF_VAR -> VAR VARIAVEL SEMICOLON LIST_VAR','DEF_VAR',4,'p_def_var','grammar.py',149),
  ('DEF_VAR -> empty','DEF_VAR',1,'p_def_var','grammar.py',150),
  ('LIST_VAR -> VARIAVEL SEMICOLON LIST_VAR','LIST_VAR',3,'p_list_var','grammar.py',160),
  ('LIST_VAR -> empty','LIST_VAR',1,'p_list_var','grammar.py',161),
  ('VARIAVEL -> LISTA_ID COLON TIPO_DADO','VARIAVEL',3,'p_variavel','grammar.py',171),
  ('LISTA_ID -> ID COMMA LISTA_ID','LISTA_ID',3,'p_lista_id','grammar.py',181),
  ('LISTA_ID -> ID','LISTA_ID',1,'p_lista_id','grammar.py',182),
  ('DEF_ROT -> NOME_ROTINA DEF_VAR BLOCO DEF_ROT','DEF_ROT',4,'p_def_rot','grammar.py',192),
  ('DEF_ROT -> empty','DEF_ROT',1,'p_def_rot','grammar.py',193),
  ('NOME_ROTINA -> FUNCTION ID PARAM_ROT COLON TIPO_DADO','NOME_ROTINA',5,'p_nome_rotina','grammar.py',203),
  ('NOME_ROTINA -> PROCEDURE ID PARAM_ROT','NOME_ROTINA',3,'p_nome_rotina','grammar.py',204),
  ('PARAM_ROT -> LEFTPARENTHESIS CAMPOS RIGHTPARENTHESIS','PARAM_ROT',3,'p_param_rot','grammar.py',214),
  ('PARAM_ROT -> empty','PARAM_ROT',1,'p_param_rot','grammar.py',215),
  ('BLOCO -> BEGIN COMANDO SEMICOLON LISTA_COM END','BLOCO',5,'p_bloco','grammar.py',225),
  ('BLOCO -> COLON COMANDO','BLOCO',2,'p_bloco','grammar.py',226),
  ('LISTA_COM -> COMANDO SEMICOLON LISTA_COM','LISTA_COM',3,'p_lista_com','grammar.py',236),
  ('LISTA_COM -> empty','LISTA_COM',1,'p_lista_com','grammar.py',237),
  ('COMANDO -> ID NOME ATRIB','COMANDO',3,'p_comando','grammar.py',247),
  ('COMANDO -> WHILE EXP_LOGICA DO BLOCO','COMANDO',4,'p_comando','grammar.py',248),
  ('COMANDO -> IF EXP_LOGICA THEN BLOCO ELSE_RULE','COMANDO',5,'p_comando','grammar.py',249),
  ('COMANDO -> RETURN EXP_LOGICA','COMANDO',2,'p_comando','grammar.py',250),
  ('COMANDO -> WRITE EXP_MAT','COMANDO',2,'p_comando','grammar.py',251),
  ('COMANDO -> READ ID NOME','COMANDO',3,'p_comando','grammar.py',252),
  ('ATRIB -> ASSIGNMENT EXP_MAT','ATRIB',2,'p_atrib','grammar.py',259),
  ('ATRIB -> empty','ATRIB',1,'p_atrib','grammar.py',260),
  ('ELSE_RULE -> ELSE BLOCO','ELSE_RULE',2,'p_else_rule','grammar.py',270),
  ('ELSE_RULE -> empty','ELSE_RULE',1,'p_else_rule','grammar.py',271),
  ('LISTA_PARAM -> PARAMETRO COMMA LISTA_PARAM','LISTA_PARAM',3,'p_lista_param','grammar.py',281),
  ('LISTA_PARAM -> PARAMETRO','LISTA_PARAM',1,'p_lista_param','grammar.py',282),
  ('LISTA_PARAM -> empty','LISTA_PARAM',1,'p_lista_param','grammar.py',283),
  ('OP_LOGICO -> GREATERTHAN','OP_LOGICO',1,'p_op_logico','grammar.py',295),
  ('OP_LOGICO -> LESSTHAN','OP_LOGICO',1,'p_op_logico','grammar.py',296),
  ('OP_LOGICO -> COMPARE','OP_LOGICO',1,'p_op_logico','grammar.py',297),
  ('OP_LOGICO -> NOTEQUAL','OP_LOGICO',1,'p_op_logico','grammar.py',298),
  ('OP_LOGICO -> GREATERTHANOREQUAL','OP_LOGICO',1,'p_op_logico','grammar.py',299),
  ('OP_LOGICO -> LESSTHANOREQUAL','OP_LOGICO',1,'p_op_logico','grammar.py',300),
  ('EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA','EXP_LOGICA',3,'p_exp_logica','grammar.py',307),
  ('EXP_LOGICA -> EXP_MAT','EXP_LOGICA',1,'p_exp_logica','grammar.py',308),
  ('EXP_MAT -> PARAMETRO OP_MAT EXP_MAT','EXP_MAT',3,'p_exp_mat','grammar.py',318),
  ('EXP_MAT -> PARAMETRO','EXP_MAT',1,'p_exp_mat','grammar.py',319),
  ('OP_MAT -> PLUS','OP_MAT',1,'p_op_mat','grammar.py',329),
  ('OP_MAT -> MINUS','OP_MAT',1,'p_op_mat','grammar.py',330),
  ('OP_MAT -> TIMES','OP_MAT',1,'p_op_mat','grammar.py',331),
  ('OP_MAT -> DIVIDE','OP_MAT',1,'p_op_mat','grammar.py',332),
  ('OP_MAT -> MODULO','OP_MAT',1,'p_op_mat','grammar.py',333),
  ('PARAMETRO -> ID NOME','PARAMETRO',2,'p_parametro','grammar.py',340),
  ('PARAMETRO -> NUMERO','PARAMETRO',1,'p_parametro','grammar.py',341),
  ('NOME -> DOT ID NOME','NOME',3,'p_nome','grammar.py',351),
  ('NOME -> LEFTBRACKET PARAMETRO RIGHTBRACKET','NOME',3,'p_nome','grammar.py',352),
  ('NOME -> LEFTPARENTHESIS LISTA_PARAM RIGHTPARENTHESIS','NOME',3,'p_nome','grammar.py',353),
  ('NOME -> empty','NOME',1,'p_nome','grammar.py',354),
  ('ID -> IDENTIFIER','ID',1,'p_id','grammar.py',365),
  ('NUMERO -> INTEGER_NUM','NUMERO',1,'p_numero','grammar.py',370),
  ('NUMERO -> REAL_NUM','NUMERO',1,'p_numero','grammar.py',371),
]
